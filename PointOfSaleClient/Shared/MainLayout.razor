@using PointOfSaleClient.Services
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IUserService UserService

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />

<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if (IsLogged)
            {
                @if(IsMobileLayout) {
                    <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                    <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                    <DxGridLayoutRow Areas="content" />
                }
                else {
                    <DxGridLayoutRow Areas="header header" Height="auto" />
                    <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
                }   
            }
        </Rows>
        <Columns>
            @if (IsLogged)
            {
                @if(!IsMobileLayout) {
                    <DxGridLayoutColumn Width="auto" />
                    <DxGridLayoutColumn />
                }   
            }
        </Columns>
        <Items>
            @if (IsLogged)
            {
                <DxGridLayoutItem Area="header" CssClass="layout-item">
                    <Template>
                        <Header @bind-ToggleOn="@IsSidebarExpanded" />
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                    <Template>
                        <NavMenu StateCssClass="@NavMenuCssClass" />
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                    <Template>
                        @Body
                    </Template>
                </DxGridLayoutItem>
            }
            else
            {
                <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                    <Template>
                        @Body
                    </Template>
                </DxGridLayoutItem>
            }
        </Items>
    </DxGridLayout>
</div>

@code{
    bool IsLogged{ get; set; }
    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout {
        get => _isMobileLayout;
        set {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded {
        get => _isSidebarExpanded;
        set {
            if(_isSidebarExpanded != value) {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    public async void Reload(){
        if (await UserService.UserIsLogged())
            IsLogged = true;
        else{
            IsLogged = await UserService.RefreshToken();
        }
    }

    protected override async void OnInitialized() {
        Reload();
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) {
        if(IsMobileLayout) {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}